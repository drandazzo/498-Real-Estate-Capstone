
#############################################
# PREDICT 498 #
# Real Estate Group #
#############################################


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LOAD PACKAGES AND DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# load libraries but install them first
list.of.packages <- c(
  "car" 
  ,"missForest" #fill in missing values
  ,"Hmisc"
  ,"corrplot" #correlation plot
  ,"lattice" #quantile plots
  ,"leaps" # Crossfold validation for best subsets
  ,"MASS" # for qda and lda
  ,"gam" # for gam
  ,"class" # for knn
  ,"randomForest" #RF
  ,"xgboost" #gradient boosting
  ,"Matrix" #sparse.model.matrix
  ,"glmnet"
  ,"leaps"
  ,"reshape"
  ,"tibble"
  ,"tidyverse" # tidyverse is a wrapper that contains dplyr, ggplot, tidyr, readr and a bunch of other great Hadley stuff
  ,"survival"
  ,"OIsurv" # Automatically loads KMsurv - bmt example
  ,"ranger"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages,library, character.only=T)

setwd("C:/Users/lstottsg/Desktop/Laura School/Summer 2017/498")

# Load Data
rm(list=ls())


X2015MLS_weka <- read_csv("C:/Users/lstottsg/Desktop/Laura School/Summer 2017/498/2015MLS-weka.csv", 
                          col_types = cols(`Baths Full` = col_factor(levels = c("0", 
                                                                                "1", "2", "3", "4", "5", "6", "7", 
                                                                                "8", "9", "10", "11")), 
                                           `Baths Half` = col_factor(levels = c("0", "1", "2", "3", "4", "5", "6")), 
                                           `Beds Total` = col_factor(levels = c("0", "1", "2", "3", "4", "5", "6", "7", 
                                                                                "8", "9", "10", "11", "12", "13", 
                                                                                "14", "15", "2215")), CDOM = col_number(), 
                                           `Close Date` = col_date(format = "%m/%d/%Y"), 
                                           County = col_factor(levels = c("Livingston", 
                                                                          "Macomb", "Oakland", "St. Clair", 
                                                                          "Wayne")), DOM = col_number(), 
                                           `Expiration Date` = col_date(format = "%m/%d/%Y"), 
                                           `Last Status` = col_factor(levels = c("ACTV", 
                                                                                 "CCS", "CWTH", "EXPD", "PEND", 
                                                                                 "SOLD", "UWTH")), `Listing Contract Date` = col_date(format = "%m/%d/%Y"), 
                                           `Off Market Date` = col_date(format = "%m/%d/%Y"), 
                                           Ownership = col_factor(levels = c("Bank - Owned", 
                                                                             "Corporate/Relocation", "Fannie MAE/Freddie MAC", 
                                                                             "Government - Owned", "Other/See Remarks", 
                                                                             "Private - Owned")), `Pending Date` = col_date(format = "%m/%d/%Y"), 
                                           `Seller Concession YN` = col_factor(levels = c("No", 
                                                                                          "Yes")), Stat = col_factor(levels = c("CWTH", 
                                                                                                                                "PEND", "SOLD", "UWTH")), `Water Frontage Feet` = col_number(), 
                                           `Waterfront YN` = col_factor(levels = c("No", 
                                                                                   "Yes")), `Year Built` = col_number(), 
                                           Zip5 = col_number()))


mls <- X2015MLS_weka
##########################################
#        Exploratory Data Analyis        #
##########################################
mls.eda <- mls

attach(mls.eda)

#view data dimensions
dim(mls.eda)

str(mls.eda)

# quick views of the data
glimpse(mls.eda)

summary(mls.eda)

# Missing data?
#~~~~~~~~~~~~~~
#2 Original List Price
#3 Close Price
# 14 Est Fin Abv Grd SqFt
#18 Zip5
#20 Year Built
#8 Pending Date
#8977 CDOM
#772 Expiration Date
#121074 Water Frontage Feet
#15 Area
#740 DOM
#8 Pending Date
#83 Waterfront YN
#679 Seller Concession YN
#123 Ownership
#53 Last Status

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# REMOVE INELIGIBLE / NON-PREDICTIVE FEATURES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# variables to exclude from training and test data
exclude_vars <- 
  c("Ty"
    ,"MLS"
    ,"List Office Phone"
    ,"Selling Office Phone"
    ,"Off Market Date"
    ,"Expiration Date"
    ,"Close Date"
    ,"Close Price"
    ,"CDOM"
    ,"DOM"
    ,"Last Status"
  )

mls.eda <- mls.eda[!names(mls.eda)%in%exclude_vars]


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# HANDLE NA VALUES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# find median "original list price", set NA to median
Original.List.Price.med <- median(`Original List Price`, na.rm = TRUE)
mls.eda$`Original List Price` <- ifelse(is.na(mls.eda$`Original List Price`), Original.List.Price.med, mls.eda$`Original List Price`)

# find median "est fin abv grd sqft", set NA to median
Est.Fin.Abv.Grd.SqFt.med <- median(`Est Fin Abv Grd SqFt`, na.rm = TRUE)
mls.eda$`Est Fin Abv Grd SqFt` <- ifelse(is.na(mls.eda$`Est Fin Abv Grd SqFt`), Est.Fin.Abv.Grd.SqFt.med, mls.eda$`Est Fin Abv Grd SqFt`)

# populate "zip5" based on zip of same MLS Major Area, Mailing City, City, School District, Street Name as applicable/available
# **********I did this manually in the excel file based on the dirty data for the 2015 sample**********

# find median "year built", set NA to median
Year.Built.med <- median(`Year Built`, na.rm = TRUE)
mls.eda$`Year Built` <- ifelse(is.na(mls.eda$`Year Built`), Year.Built.med, mls.eda$`Year Built`)

# find median "area"
Area.med <- median(Area, na.rm = TRUE)
mls.eda$Area <- ifelse(is.na(mls.eda$Area), Area.med, mls.eda$Area)

# change NA values for water frontage feet to zero
mls.eda$`Water Frontage Feet` <- ifelse(is.na(mls.eda$`Water Frontage Feet`), 0, mls.eda$`Water Frontage Feet`)

# remove observations with NA Pending Date (cannot use Close Date or Off Market Date to populate because post-pending dates)
mls.eda <- mls.eda[!is.na(mls.eda$`Pending Date`),]

# populate Waterfront YN with Y if there is a Waterfront Name or Description for property, else N
mls.eda$`Waterfront YN` <- ifelse(is.na(mls.eda$`Waterfront YN`)
                                  , ifelse(is.na(mls.eda$`Waterfront Name`)
                                           , ifelse(is.na(mls.eda$`Waterfront Description`)
                                                      , 'N'
                                                      , 'Y')
                                           , 'Y')
                                  , mls.eda$`Waterfront YN`)


# populate Seller Concession YN with ??? (Not sure best way)

# populate Ownership with ??? (Not sure best way)



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# CREATE PREDICTOR VARIABLES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#create DaysListToPending variable for prediction
mls.eda$DaysListToPending <- as.numeric(mls.eda$`Pending Date` - mls.eda$`Listing Contract Date`)

#create PendingYN variable for prediction
#this will include status of pending or sold = 1,  conditionally or unconditionally withdrawn = 0
mls.eda$PendingIndicator <- mls.eda$Stat                           
levels(mls.eda$PendingIndicator) <- c(0,1,1,0)              
mls.eda$PendingIndicator <- as.numeric(as.character(mls.eda$PendingIndicator))  

#we have a data set heavily weighted with pending and sold properties
mean(mls.eda$PendingIndicator, na.rm = T)
#0.9999341

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# REVIEW SUMMARY DATA AGAIN
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#look at summary again after imputations and removals
summary(mls.eda)
glimpse(mls.eda)

#Hmisc package to get further info like high/low, distinct, mean, frequency
library(Hmisc)
describe(mls.eda)

#load pych package to see skew, kurtosis, se for numeric values
library(psych)
describe(mls.eda)


# remove further observations with missing values???
#mls.eda <- na.omit(mls.eda)


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# SUBSET
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#subset by type
mls.cat <- mls.eda[,c('County', 'MLS Area Major', 'Mailing City', 'City', 'Zip5',
                           'School District', 'Waterfront Name', 'Waterfront Description', 'Ownership',
                           'Foundation', 'Address', 'List Office Name', 'Selling Office Name',
                           'List Agent Full Name', 'Selling Agent Full Name')]

mls.bin <- mls.eda[,c('Seller Concession YN', 'Waterfront YN')]

mls.num <- mls.eda[,c('Original List Price', 'List Price', 'Est Fin Abv Grd SqFt',
                          'Est Tot Fin SqFt', 'Area', 'Water Frontage Feet', 'Year Built')]

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# CORRELATIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Pearson correlations for numeric values
rcorr(as.matrix(mls.num), type="pearson")

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PLOT
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#scatterplot matrix of numeric values
scatterplotMatrix(mls.num, smoother=FALSE)


##########################################
#        TRANSFORMATIONS                 #
##########################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# HANDLE OUTLIERS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BINNING
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# create bins of 10
bin_10 <- function(x) ntile(x,10)


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MATHEMATICAL
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# square transform
var_square <- function(x) x^2

# log transform
var_log <- function(x) log(abs(x)+1)*sign(x)

# sqrt transform
var_log <- function(x) log(abs(x)+1)*sign(x)

# cubrt transform
var_log <- function(x) log(abs(x)+1)*sign(x)

# reciprocal transform
var_log <- function(x) log(abs(x)+1)*sign(x)


##########################################
#        PARTITION DATA                  #
##########################################

mls.model <- mls.eda

#Training


#Validation


#Testing



##########################################
#        SURVIVAL ANALYSIS               #
##########################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Kaplan Meier Analysis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Kaplan Meier Survival Curve
y_mls <- Surv(mls.model$DaysListToPending, mls.model$PendingIndicator)
y_mls

fit1_mls <- survfit(y_mls ~ 1)
summary(fit1_mls)

#Kaplan Meier Plot with Confidence Bands
cb <- confBands(y_mls, type = "hall")
plot(fit1_mls,
     main = 'Kaplan Meier Plot with Confidence Bands')
lines(cb, col = "red",lty = 3)
legend(1000, 0.99, legend = c('K-M Survival Estimate',
                              'Pointwise Intervals', 'Hall-Werner Conf Bands'), lty = 1:3)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Cox Proportional Hazards Model
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Fit Cox Model
form <- formula(y_mls ~ mls.model$`Original List Price`) #Add predictors here...

cox_bmt <- coxph(form,data = mls.model)
summary(cox_mls)

cox_fit_mls <- survfit(cox_mls)
plot(cox_fit_mls)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Random Forests Model
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ranger model
r_fit_mls <- ranger(form,
                    data = mls,
                    importance = "permutation",
                    seed = 1234)

# Average the survival models
pending_times <- r_fit_mls$unique.death.times
surv_prob <- data.frame(r_fit_mls$survival)
avg_prob <- sapply(surv_prob,mean)

# Plot the survival models for each patient
plot(r_fit_mls$unique.death.times,r_fit_mls$survival[1,], type = "l", 
     ylim = c(0,1),
     col = "red",
     xlab = "pending sale",
     ylab = "survival",
     main = "Pending Sale Curves")

for(n in c(2:137)){
  lines(r_fit_mls$unique.death.times, r_fit_mls$survival[n,], type = "l", col = "red")
}
lines(death_times, avg_prob, lwd = 2)
legend(100, 0.2, legend = c('Averages - black'))


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# FINAL RESULTS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~






